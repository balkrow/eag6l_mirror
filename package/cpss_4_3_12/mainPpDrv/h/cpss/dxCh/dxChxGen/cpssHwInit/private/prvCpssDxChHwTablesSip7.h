/*******************************************************************************
*              (c), Copyright 2001, Marvell International Ltd.                 *
* THIS CODE CONTAINS CONFIDENTIAL INFORMATION OF MARVELL SEMICONDUCTOR, INC.   *
* NO RIGHTS ARE GRANTED HEREIN UNDER ANY PATENT, MASK WORK RIGHT OR COPYRIGHT  *
* OF MARVELL OR ANY THIRD PARTY. MARVELL RESERVES THE RIGHT AT ITS SOLE        *
* DISCRETION TO REQUEST THAT THIS CODE BE IMMEDIATELY RETURNED TO MARVELL.     *
* THIS CODE IS PROVIDED "AS IS". MARVELL MAKES NO WARRANTIES, EXPRESSED,       *
* IMPLIED OR OTHERWISE, REGARDING ITS ACCURACY, COMPLETENESS OR PERFORMANCE.   *
********************************************************************************
*/
/**
********************************************************************************
* @file prvCpssDxChHwTablesSip7.h
*
* @brief Private API definition for tables access of the Sip7 devices.
*
* @version   1
********************************************************************************
*/

#ifndef __prvCpssDxChHwTablesSip7h
#define __prvCpssDxChHwTablesSip7h

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */

/* the fields of the (HA) ipv4 vport tunnel start table */
typedef enum{
      SIP7_HA_IPV4_VPORT_TUNNEL_START_TABLE_FIELDS_TUNNEL_TYPE_E
    , SIP7_HA_IPV4_VPORT_TUNNEL_START_TABLE_FIELDS_TAG0_QOS_MARKING_MODE_E
    , SIP7_HA_IPV4_VPORT_TUNNEL_START_TABLE_FIELDS_TAG1_QOS_MARKING_MODE_E
    , SIP7_HA_IPV4_VPORT_TUNNEL_START_TABLE_FIELDS_UP0_E
    , SIP7_HA_IPV4_VPORT_TUNNEL_START_TABLE_FIELDS_DEI0_E
    , SIP7_HA_IPV4_VPORT_TUNNEL_START_TABLE_FIELDS_UP1_E
    , SIP7_HA_IPV4_VPORT_TUNNEL_START_TABLE_FIELDS_DEI1_E
    , SIP7_HA_IPV4_VPORT_TUNNEL_START_TABLE_FIELDS_TTL_E
    , SIP7_HA_IPV4_VPORT_TUNNEL_START_TABLE_FIELDS_PROTOCOL_E
    , SIP7_HA_IPV4_VPORT_TUNNEL_START_TABLE_FIELDS_DSCP_E
    , SIP7_HA_IPV4_VPORT_TUNNEL_START_TABLE_FIELDS_DSCP_MARKING_MODE_E
    , SIP7_HA_IPV4_VPORT_TUNNEL_START_TABLE_FIELDS_DF_FLAG_E
    , SIP7_HA_IPV4_VPORT_TUNNEL_START_TABLE_FIELDS_AUTO_TUNNEL_OFFSET_E
    , SIP7_HA_IPV4_VPORT_TUNNEL_START_TABLE_FIELDS_AUTO_TUNNEL_FLAG_E
    , SIP7_HA_IPV4_VPORT_TUNNEL_START_TABLE_FIELDS_PROFILE_NUMBER_E
    , SIP7_HA_IPV4_VPORT_TUNNEL_START_TABLE_FIELDS_UDP_SRC_PORT_E
    , SIP7_HA_IPV4_VPORT_TUNNEL_START_TABLE_FIELDS_GRE_FLAGS_AND_VER_E
    , SIP7_HA_IPV4_VPORT_TUNNEL_START_TABLE_FIELDS_DIP_E
    , SIP7_HA_IPV4_VPORT_TUNNEL_START_TABLE_FIELDS_SIP_E
    , SIP7_HA_IPV4_VPORT_TUNNEL_START_TABLE_FIELDS_ANALYZER_INDEX_E
    , SIP7_HA_IPV4_VPORT_TUNNEL_START_TABLE_FIELDS_CNC_PTR_E
    , SIP7_HA_IPV4_VPORT_TUNNEL_START_TABLE_FIELDS_FLOW_ID_GCF_ASSIGNMENT_PROFILE_E
    , SIP7_HA_IPV4_VPORT_TUNNEL_START_TABLE_FIELDS_FLOW_ID_GCF_BITS_E
    , SIP7_HA_IPV4_VPORT_TUNNEL_START_TABLE_FIELDS_RESERVED_E

    ,SIP7_HA_IPV4_VPORT_TUNNEL_START_TABLE_FIELDS____LAST_VALUE___E/* used for array size */
}SIP7_HA_IPV4_VPORT_TUNNEL_START_TABLE_FIELDS_ENT;


/* the fields of the (HA) ipv6 vport tunnel start table */
typedef enum{
     SIP7_HA_IPV6_VPORT_TUNNEL_START_TABLE_FIELDS_TUNNEL_TYPE_E
    ,SIP7_HA_IPV6_VPORT_TUNNEL_START_TABLE_FIELDS_TAG0_QOS_MARKING_MODE_E
    ,SIP7_HA_IPV6_VPORT_TUNNEL_START_TABLE_FIELDS_TAG1_QOS_MARKING_MODE_E
    ,SIP7_HA_IPV6_VPORT_TUNNEL_START_TABLE_FIELDS_UP0_E
    ,SIP7_HA_IPV6_VPORT_TUNNEL_START_TABLE_FIELDS_DEI0_E
    ,SIP7_HA_IPV6_VPORT_TUNNEL_START_TABLE_FIELDS_UP1_E
    ,SIP7_HA_IPV6_VPORT_TUNNEL_START_TABLE_FIELDS_DEI1_E
    ,SIP7_HA_IPV6_VPORT_TUNNEL_START_TABLE_FIELDS_TTL_E
    ,SIP7_HA_IPV6_VPORT_TUNNEL_START_TABLE_FIELDS_PROTOCOL_E
    ,SIP7_HA_IPV6_VPORT_TUNNEL_START_TABLE_FIELDS_DSCP_E
    ,SIP7_HA_IPV6_VPORT_TUNNEL_START_TABLE_FIELDS_DSCP_MARKING_MODE_E
    ,SIP7_HA_IPV6_VPORT_TUNNEL_START_TABLE_FIELDS_DF_FLAG_E
    ,SIP7_HA_IPV6_VPORT_TUNNEL_START_TABLE_FIELDS_AUTO_TUNNEL_OFFSET_E
    ,SIP7_HA_IPV6_VPORT_TUNNEL_START_TABLE_FIELDS_AUTO_TUNNEL_FLAG_E
    ,SIP7_HA_IPV6_VPORT_TUNNEL_START_TABLE_FIELDS_PROFILE_NUMBER_E
    ,SIP7_HA_IPV6_VPORT_TUNNEL_START_TABLE_FIELDS_UDP_SRC_PORT_E
    ,SIP7_HA_IPV6_VPORT_TUNNEL_START_TABLE_FIELDS_GRE_FLAGS_AND_VER_E
    ,SIP7_HA_IPV6_VPORT_TUNNEL_START_TABLE_FIELDS_DIP_E
    ,SIP7_HA_IPV6_VPORT_TUNNEL_START_TABLE_FIELDS_SIP_E
    ,SIP7_HA_IPV6_VPORT_TUNNEL_START_TABLE_FIELDS_ANALYZER_INDEX_E
    ,SIP7_HA_IPV6_VPORT_TUNNEL_START_TABLE_FIELDS_CNC_PTR_E
    ,SIP7_HA_IPV6_VPORT_TUNNEL_START_TABLE_FIELDS_FLOW_ID_GCF_ASSIGNMENT_PROFILE_E
    ,SIP7_HA_IPV6_VPORT_TUNNEL_START_TABLE_FIELDS_FLOW_ID_GCF_BITS_E
    ,SIP7_HA_IPV6_VPORT_TUNNEL_START_TABLE_FIELDS_FLOW_LABEL_MODE_E
    ,SIP7_HA_IPV6_VPORT_TUNNEL_START_TABLE_FIELDS_FLOW_LABEL_ENTROPY_MODE_E
    ,SIP7_HA_IPV6_VPORT_TUNNEL_START_TABLE_FIELDS_FLOW_LABEL_VALUE_E

    ,SIP7_HA_IPV6_VPORT_TUNNEL_START_TABLE_FIELDS____LAST_VALUE___E/* used for array size */
}SIP7_HA_IPV6_VPORT_TUNNEL_START_TABLE_FIELDS_ENT;

/* the fields of the (HA) mpls vport tunnel start table */
typedef enum{
     SIP7_HA_MPLS_VPORT_TUNNEL_START_TABLE_FIELDS_TUNNEL_TYPE_E
    ,SIP7_HA_MPLS_VPORT_TUNNEL_START_TABLE_FIELDS_TAG0_QOS_MARKING_MODE_E
    ,SIP7_HA_MPLS_VPORT_TUNNEL_START_TABLE_FIELDS_TAG1_QOS_MARKING_MODE_E
    ,SIP7_HA_MPLS_VPORT_TUNNEL_START_TABLE_FIELDS_UP0_E
    ,SIP7_HA_MPLS_VPORT_TUNNEL_START_TABLE_FIELDS_DEI0_E
    ,SIP7_HA_MPLS_VPORT_TUNNEL_START_TABLE_FIELDS_UP1_E
    ,SIP7_HA_MPLS_VPORT_TUNNEL_START_TABLE_FIELDS_DEI1_E
    ,SIP7_HA_MPLS_VPORT_TUNNEL_START_TABLE_FIELDS_THREAD_ID_E
    ,SIP7_HA_MPLS_VPORT_TUNNEL_START_TABLE_FIELDS_ANALYZER_INDEX_E
    ,SIP7_HA_MPLS_VPORT_TUNNEL_START_TABLE_FIELDS_EGRESS_MIRRORING_MODE_E
    ,SIP7_HA_MPLS_VPORT_TUNNEL_START_TABLE_FIELDS_ROW_LABELS_E
    ,SIP7_HA_MPLS_VPORT_TUNNEL_START_TABLE_FIELDS_MPLS_ETHERTYPE_SELECT_E
    ,SIP7_HA_MPLS_VPORT_TUNNEL_START_TABLE_FIELDS_CNC_PTR_E
    ,SIP7_HA_MPLS_VPORT_TUNNEL_START_TABLE_FIELDS_FLOW_ID_GCF_PROFILE_ID_E
    ,SIP7_HA_MPLS_VPORT_TUNNEL_START_TABLE_FIELDS_FLOW_ID_GCF_BITS_E
    ,SIP7_HA_MPLS_VPORT_TUNNEL_START_TABLE_FIELDS_NUMBER_OF_LABELS_E
    ,SIP7_HA_MPLS_VPORT_TUNNEL_START_TABLE_FIELDS_LAST_QOS_UNIFORM_LABEL_E
    ,SIP7_HA_MPLS_VPORT_TUNNEL_START_TABLE_FIELDS_QOS_MAPPING_TABLE_INDEX_E
    ,SIP7_HA_MPLS_VPORT_TUNNEL_START_TABLE_FIELDS_LAST_TTL_UNIFORM_LABEL_E
    ,SIP7_HA_MPLS_VPORT_TUNNEL_START_TABLE_FIELDS_CW_INDEX_E
    ,SIP7_HA_MPLS_VPORT_TUNNEL_START_TABLE_FIELDS_FLOW_LABEL_INSERTION_E

    ,SIP7_HA_MPLS_VPORT_TUNNEL_START_TABLE_FIELDS____LAST_VALUE___E/* used for array size */
}SIP7_HA_MPLS_VPORT_TUNNEL_START_TABLE_FIELDS_ENT;

/* the fields of the (HA) Ingress ePort 1 table */
typedef enum{
     SIP7_HA_SRC_EPORT_1_TABLE_FIELDS_MPLS_PW_LABEL_PUSH_ENABLE_E
    ,SIP7_HA_SRC_EPORT_1_TABLE_FIELDS_SOURCE_BASED_MPLS_LABEL_E
    ,SIP7_HA_SRC_EPORT_1_TABLE_FIELDS_SOURCE_BASED_MPLS_LABEL_EXP_E
    ,SIP7_HA_SRC_EPORT_1_TABLE_FIELDS_SOURCE_BASED_MPLS_LABEL_TTL_E
    ,SIP7_HA_SRC_EPORT_1_TABLE_FIELDS_ROUTER_MAC_SA_INDEX_E

    ,SIP7_HA_SRC_EPORT_1_TABLE_FIELDS____LAST_VALUE___E/* used for array size */
}SIP7_HA_SRC_EPORT_1_TABLE_FIELDS_ENT;

/* the fields of the (HA) Ingress ePort 2 table */
typedef enum{
    SIP7_HA_SRC_EPORT_2_TABLE_FIELDS_PUSHED_TAG_VLAN_ID_VLAUE_E
    ,SIP7_HA_SRC_EPORT_2_TABLE_FIELDS_FORCE_E_TAG_IE_PID_TO_DEFAULT_E

    ,SIP7_HA_SRC_EPORT_2_TABLE_FIELDS____LAST_VALUE___E/* used for array size */
}SIP7_HA_SRC_EPORT_2_TABLE_FIELDS_ENT;

/* the fields of the (HA) Ingress physical port 2 table */
typedef enum{
     SIP7_HA_SRC_PHYSICAL_PORT_2_TABLE_FIELDS_INVALID_CRC_MODE_E
    ,SIP7_HA_SRC_PHYSICAL_PORT_2_TABLE_FIELDS_PORT_TIMESTAMP_RECEPTION_EN_E
    ,SIP7_HA_SRC_PHYSICAL_PORT_2_TABLE_FIELDS_TRUNK_ID_E
    ,SIP7_HA_SRC_PHYSICAL_PORT_2_TABLE_FIELDS_HSR_BASE_LSDU_OFFSET_E

    ,SIP7_HA_SRC_PHYSICAL_PORT_2_TABLE_FIELDS____LAST_VALUE___E/* used for array size */
}SIP7_HA_SRC_PHYSICAL_PORT_2_TABLE_FIELDS_ENT;

/* the fields of the (HA) Target circuits table */
typedef enum{
     SIP7_HA_TARGET_CIRCUITS_TABLE_FIELDS_MODE_E
    ,SIP7_HA_TARGET_CIRCUITS_TABLE_FIELDS_TAG0_TPID_INDEX_E
    ,SIP7_HA_TARGET_CIRCUITS_TABLE_FIELDS_TAG1_TPID_INDEX_E
    ,SIP7_HA_TARGET_CIRCUITS_TABLE_FIELDS_TAG0_VLAN_E
    ,SIP7_HA_TARGET_CIRCUITS_TABLE_FIELDS_TAG1_VLAN_E
    ,SIP7_HA_TARGET_CIRCUITS_TABLE_FIELDS_TAG0_UP_E
    ,SIP7_HA_TARGET_CIRCUITS_TABLE_FIELDS_TAG0_DEI_E
    ,SIP7_HA_TARGET_CIRCUITS_TABLE_FIELDS_TAG1_UP_E
    ,SIP7_HA_TARGET_CIRCUITS_TABLE_FIELDS_TAG1_DEI_E
    ,SIP7_HA_TARGET_CIRCUITS_TABLE_FIELDS_DSCP_E
    ,SIP7_HA_TARGET_CIRCUITS_TABLE_FIELDS_QOS_MAPPING_TABLE_INDEX_E
    ,SIP7_HA_TARGET_CIRCUITS_TABLE_FIELDS_L2_HEADER_UP0_DEI0_QOS_MARKING_MODE_E
    ,SIP7_HA_TARGET_CIRCUITS_TABLE_FIELDS_L2_HEADER_UP1_DEI1_QOS_MARKING_MODE_E
    ,SIP7_HA_TARGET_CIRCUITS_TABLE_FIELDS_DSCP_MARKING_MODE_E
    ,SIP7_HA_TARGET_CIRCUITS_TABLE_FIELDS_MAC_SA_INDEX_E
    ,SIP7_HA_TARGET_CIRCUITS_TABLE_FIELDS_MESH_ID_E
    ,SIP7_HA_TARGET_CIRCUITS_TABLE_FIELDS_MTU_PROFILE_E
    ,SIP7_HA_TARGET_CIRCUITS_TABLE_FIELDS_ANALYZER_INDEX_E
    ,SIP7_HA_TARGET_CIRCUITS_TABLE_FIELDS_EGRESS_MIRRORING_MODE_E
    ,SIP7_HA_TARGET_CIRCUITS_TABLE_FIELDS_MAC_DA_E
    ,SIP7_HA_TARGET_CIRCUITS_TABLE_FIELDS_ASSIGN_MAC_DA_E
    ,SIP7_HA_TARGET_CIRCUITS_TABLE_FIELDS_CNC_PTR_E
    ,SIP7_HA_TARGET_CIRCUITS_TABLE_FIELDS_GCF_PROFILE_ID_E
    ,SIP7_HA_TARGET_CIRCUITS_TABLE_FIELDS_FLOW_ID_GCF_BITS_E

    ,SIP7_HA_TARGET_CIRCUITS_TABLE_FIELDS____LAST_VALUE___E/* used for array size */
}SIP7_HA_TARGET_CIRCUITS_TABLE_FIELDS_ENT;

/* the fields of the (HA) Analyzers target circuits table */
typedef enum{
     SIP7_HA_ANALYZERS_TARGET_CIRCUITS_TABLE_FIELDS_MODE_E
    ,SIP7_HA_ANALYZERS_TARGET_CIRCUITS_TABLE_FIELDS_TAG0_TPID_INDEX_E
    ,SIP7_HA_ANALYZERS_TARGET_CIRCUITS_TABLE_FIELDS_TAG1_TPID_INDEX_E
    ,SIP7_HA_ANALYZERS_TARGET_CIRCUITS_TABLE_FIELDS_TAG0_VLAN_E
    ,SIP7_HA_ANALYZERS_TARGET_CIRCUITS_TABLE_FIELDS_TAG1_VLAN_E
    ,SIP7_HA_ANALYZERS_TARGET_CIRCUITS_TABLE_FIELDS_TAG0_UP_E
    ,SIP7_HA_ANALYZERS_TARGET_CIRCUITS_TABLE_FIELDS_TAG0_DEI_E
    ,SIP7_HA_ANALYZERS_TARGET_CIRCUITS_TABLE_FIELDS_TAG1_UP_E
    ,SIP7_HA_ANALYZERS_TARGET_CIRCUITS_TABLE_FIELDS_TAG1_DEI_E
    ,SIP7_HA_ANALYZERS_TARGET_CIRCUITS_TABLE_FIELDS_MTU_PROFILE_E

    ,SIP7_HA_ANALYZERS_TARGET_CIRCUITS_TABLE_FIELDS____LAST_VALUE___E/* used for array size */
}SIP7_HA_ANALYZERS_TARGET_CIRCUITS_TABLE_FIELDS_ENT;

/* the fields of the (HA) Queue mapping table */
typedef enum{
     SIP7_HA_QUEUE_MAPPING_TABLE_FIELDS_TAIL_DROP_PROFILE_E

    ,SIP7_HA_QUEUE_MAPPING_TABLE_FIELDS____LAST_VALUE___E/* used for array size */
}SIP7_HA_QUEUE_MAPPING_TABLE_FIELDS_ENT;

/* the fields of the (HA) QoS mapping table */
typedef enum{
     SIP7_HA_QOS_MAPPING_TABLE_FIELDS_TAG0_UP0_E
    ,SIP7_HA_QOS_MAPPING_TABLE_FIELDS_TAG0_DEI0_E
    ,SIP7_HA_QOS_MAPPING_TABLE_FIELDS_TAG1_UP0_E
    ,SIP7_HA_QOS_MAPPING_TABLE_FIELDS_TAG1_DEI0_E
    ,SIP7_HA_QOS_MAPPING_TABLE_FIELDS_DSCP0_E
    ,SIP7_HA_QOS_MAPPING_TABLE_FIELDS_EXP0_E
    ,SIP7_HA_QOS_MAPPING_TABLE_FIELDS_TAG0_UP1_E
    ,SIP7_HA_QOS_MAPPING_TABLE_FIELDS_TAG0_DEI1_E
    ,SIP7_HA_QOS_MAPPING_TABLE_FIELDS_TAG1_UP1_E
    ,SIP7_HA_QOS_MAPPING_TABLE_FIELDS_TAG1_DEI1_E
    ,SIP7_HA_QOS_MAPPING_TABLE_FIELDS_DSCP1_E
    ,SIP7_HA_QOS_MAPPING_TABLE_FIELDS_EXP1_E
    ,SIP7_HA_QOS_MAPPING_TABLE_FIELDS_TAG0_UP2_E
    ,SIP7_HA_QOS_MAPPING_TABLE_FIELDS_TAG0_DEI2_E
    ,SIP7_HA_QOS_MAPPING_TABLE_FIELDS_TAG1_UP2_E
    ,SIP7_HA_QOS_MAPPING_TABLE_FIELDS_TAG2_DEI2_E
    ,SIP7_HA_QOS_MAPPING_TABLE_FIELDS_DSCP2_E
    ,SIP7_HA_QOS_MAPPING_TABLE_FIELDS_EXP2_E
    ,SIP7_HA_QOS_MAPPING_TABLE_FIELDS_TAG0_UP3_E
    ,SIP7_HA_QOS_MAPPING_TABLE_FIELDS_TAG0_DEI3_E
    ,SIP7_HA_QOS_MAPPING_TABLE_FIELDS_TAG1_UP3_E
    ,SIP7_HA_QOS_MAPPING_TABLE_FIELDS_TAG1_DEI3_E
    ,SIP7_HA_QOS_MAPPING_TABLE_FIELDS_DSCP3_E
    ,SIP7_HA_QOS_MAPPING_TABLE_FIELDS_EXP3_E

    ,SIP7_HA_QOS_MAPPING_TABLE_FIELDS____LAST_VALUE___E/* used for array size */
}SIP7_HA_QOS_MAPPING_TABLE_FIELDS_ENT;

/* Fields of the (HA) Header Fields Table */
typedef enum{
     SIP7_HA_HEADER_FIELDS_ENTRY_TYPE_E
    ,SIP7_HA_HEADER_FIELDS_SUB_TYPE_E
    ,SIP7_HA_HEADER_FIELDS_ANALYZER_INDEX_E
    ,SIP7_HA_HEADER_FIELDS_EGRESS_MIRROR_MODE_E
    ,SIP7_HA_HEADER_FIELDS_SUB_THREAD_ID_E
    ,SIP7_HA_HEADER_FIELDS_CNC_PTR_E
    ,SIP7_HA_HEADER_FIELDS_GCF_PROFILE_ID_E
    ,SIP7_HA_HEADER_FIELDS_GCF_BITS_0_4_E
    ,SIP7_HA_HEADER_FIELDS_NUMBER_OF_LABELS_E
    ,SIP7_HA_HEADER_FIELDS_LAST_QOS_UNIFORM_LABEL_E
    ,SIP7_HA_HEADER_FIELDS_GLOBAL_EXP_MAPPING_TBL_INDEX_E
    ,SIP7_HA_HEADER_FIELDS_LAST_TTL_UNIFORM_LABEL_E
    ,SIP7_HA_HEADER_FIELDS_CW_INDEX_E
    ,SIP7_HA_HEADER_FIELDS_FLOW_LABEL_INSERTION_E
    ,SIP7_HA_HEADER_FIELDS_GCF_BITS_5_47_E
    ,SIP7_HA_HEADER_FIELDS_FLOW_ID_E
    ,SIP7_HA_HEADER_FIELDS_MPLS_LABELS_E
    ,SIP7_HA_HEADER_FIELDS_TABLE_FIELDS____LAST_VALUE___E/* used for array size */
}SIP7_HA_HEADER_FIELDS_TABLE_FIELDS_ENT;

/* the fields of the (IPVX) Router L3NHE Profile fields table */
typedef enum{
     SIP7_IPVX_ROUTER_L3NHE_PROFILE_TABLE_FIELDS_PACKET_CMD_E
     ,SIP7_IPVX_ROUTER_L3NHE_PROFILE_TABLE_FIELDS_BYPASS_TTL_OPTIONS_OR_HOP_EXTENTION_E
     ,SIP7_IPVX_ROUTER_L3NHE_PROFILE_TABLE_FIELDS_CPU_CODE_INDEX_E
     ,SIP7_IPVX_ROUTER_L3NHE_PROFILE_TABLE_FIELDS_INGRESS_MIRRROR_TO_ANALYZER_INDEX_E
     ,SIP7_IPVX_ROUTER_L3NHE_PROFILE_TABLE_FIELDS_QOS_PROFILE_PRECEDE_E
     ,SIP7_IPVX_ROUTER_L3NHE_PROFILE_TABLE_FIELDS_TARGET_EPG_E
     ,SIP7_IPVX_ROUTER_L3NHE_PROFILE_TABLE_FIELDS_NEXT_HOP_VID1_E
     ,SIP7_IPVX_ROUTER_L3NHE_PROFILE_TABLE_FIELDS_QOS_PROFILE_MARKING_EN_E
     ,SIP7_IPVX_ROUTER_L3NHE_PROFILE_TABLE_FIELDS_QOS_PROFILE_INDEX_E
     ,SIP7_IPVX_ROUTER_L3NHE_PROFILE_TABLE_FIELDS_MODIFY_DSCP_E
     ,SIP7_IPVX_ROUTER_L3NHE_PROFILE_TABLE_FIELDS_MODIFY_UP_E
     ,SIP7_IPVX_ROUTER_L3NHE_PROFILE_TABLE_FIELDS_NEXT_HOP_EVLAN_E
     ,SIP7_IPVX_ROUTER_L3NHE_PROFILE_TABLE_FIELDS_DIP_ACCESS_LEVEL_E
     ,SIP7_IPVX_ROUTER_L3NHE_PROFILE_TABLE_FIELDS_SIP_ACCESS_LEVEL_E
     ,SIP7_IPVX_ROUTER_L3NHE_PROFILE_TABLE_FIELDS_IPV6_DEST_SITE_ID_E
     ,SIP7_IPVX_ROUTER_L3NHE_PROFILE_TABLE_FIELDS_IPV6_SCOPE_CHECK_E
     ,SIP7_IPVX_ROUTER_L3NHE_PROFILE_TABLE_FIELDS_COUNTER_SET_INDEX_E
     ,SIP7_IPVX_ROUTER_L3NHE_PROFILE_TABLE_FIELDS_MTU_INDEX_E
     ,SIP7_IPVX_ROUTER_L3NHE_PROFILE_TABLE_FIELDS_ARP_BC_TRAP_MIRROR_EN_E
     ,SIP7_IPVX_ROUTER_L3NHE_PROFILE_TABLE_FIELDS_APP_SPECIFIC_CPU_CODE_EN_E
     ,SIP7_IPVX_ROUTER_L3NHE_PROFILE_TABLE_FIELDS_SIP_FILTER_EN_E
     ,SIP7_IPVX_ROUTER_L3NHE_PROFILE_TABLE_FIELDS_DEC_TTL_OR_HOP_COUNT_E
     ,SIP7_IPVX_ROUTER_L3NHE_PROFILE_TABLE_FIELDS_ICMP_REDIRECT_EXCEP_MIRROR_E
     ,SIP7_IPVX_ROUTER_L3NHE_PROFILE_TABLE_FIELDS____LAST_VALUE___E/* used for array size */
}SIP7_IPVX_ROUTER_L3NHE_PROFILE_TABLE_FIELDS_ENT;


/* the fields of the (IPE) State Addres Profile fields table */
typedef enum{
     SIP7_IPE_STATE_ADDRESS_PROFILE_TABLE_FIELDS_SAH_BAR_E
     ,SIP7_IPE_STATE_ADDRESS_PROFILE_TABLE_FIELDS_SAH_AOFFST_START_E
     ,SIP7_IPE_STATE_ADDRESS_PROFILE_TABLE_FIELDS_SAH_AOFFST_MASK_E
     ,SIP7_IPE_STATE_ADDRESS_PROFILE_TABLE_FIELDS_SAH_HASH_START_E
     ,SIP7_IPE_STATE_ADDRESS_PROFILE_TABLE_FIELDS_SAH_HASH_MASK_E
     ,SIP7_IPE_STATE_ADDRESS_PROFILE_TABLE_FIELDS_SAH_ICT_AOF_EN_E
     ,SIP7_IPE_STATE_ADDRESS_PROFILE_TABLE_FIELDS_SAH_ICT_AOF_BITS_E
     ,SIP7_IPE_STATE_ADDRESS_PROFILE_TABLE_FIELDS____LAST_VALUE___E/* used for array size */
}SIP7_IPE_STATE_ADDRESS_PROFILE_TABLE_FIELDS_ENT;


/* the fields of the PPU for IPE action table in Sip7 */
typedef enum{
    /* ROT 0 */
    SIP7_PPU_FOR_IPE_ACTION_TABLE_FIELDS_ROT_0_SRC_REG_SEL_E

    /** When srcRegSel == _4BYTE_SET_CMD */
        ,SIP7_PPU_FOR_IPE_ACTION_TABLE_FIELDS_ROT_0_SRC_CMD_4BYTE_E

    /** when srcRegSel != _4BYTE_SET_CMD */
        ,SIP7_PPU_FOR_IPE_ACTION_TABLE_FIELDS_ROT_0_SRC_OFFSET_E
        ,SIP7_PPU_FOR_IPE_ACTION_TABLE_FIELDS_ROT_0_SRC_NUM_VAL_BITS_E

        /** when srcRegSel != _4BYTE_SET_CMD and func != CMP_REG */
            ,SIP7_PPU_FOR_IPE_ACTION_TABLE_FIELDS_ROT_0_SHIFT_LEFT_RIGHT_E
            ,SIP7_PPU_FOR_IPE_ACTION_TABLE_FIELDS_ROT_0_SHIFT_NUM_E
            ,SIP7_PPU_FOR_IPE_ACTION_TABLE_FIELDS_ROT_0_SET_BITS_NUM_E
            ,SIP7_PPU_FOR_IPE_ACTION_TABLE_FIELDS_ROT_0_SET_BITS_VAL_E
            ,SIP7_PPU_FOR_IPE_ACTION_TABLE_FIELDS_ROT_0_SET_BITS_OFFSET_E
            ,SIP7_PPU_FOR_IPE_ACTION_TABLE_FIELDS_ROT_0_ADD_SUB_CONST_E
            ,SIP7_PPU_FOR_IPE_ACTION_TABLE_FIELDS_ROT_0_ADD_SUB_CONST_SEL_E

        /** when srcRegSel != _4BYTE_SET_CMD and func == CMP_REG */
            ,SIP7_PPU_FOR_IPE_ACTION_TABLE_FIELDS_ROT_0_CMP_VAL_E
            ,SIP7_PPU_FOR_IPE_ACTION_TABLE_FIELDS_ROT_0_CMP_FALSE_VAL_LD_E
            ,SIP7_PPU_FOR_IPE_ACTION_TABLE_FIELDS_ROT_0_CMP_COND_E
            ,SIP7_PPU_FOR_IPE_ACTION_TABLE_FIELDS_ROT_0_CMP_MASK_E
            ,SIP7_PPU_FOR_IPE_ACTION_TABLE_FIELDS_ROT_0_CMP_TRUE_VAL_LD_E

    ,SIP7_PPU_FOR_IPE_ACTION_TABLE_FIELDS_ROT_0_FUNC_E
    ,SIP7_PPU_FOR_IPE_ACTION_TABLE_FIELDS_ROT_0_FUNC_SECOND_OPERAND_E
    ,SIP7_PPU_FOR_IPE_ACTION_TABLE_FIELDS_ROT_0_TARGET_E
    ,SIP7_PPU_FOR_IPE_ACTION_TABLE_FIELDS_ROT_0_LD_SP_BUS_NUM_BYTES_E
    ,SIP7_PPU_FOR_IPE_ACTION_TABLE_FIELDS_ROT_0_LD_SP_BUS_OFFSET_E
    ,SIP7_PPU_FOR_IPE_ACTION_TABLE_FIELDS_ROT_0_INTERRUPT_E
    ,SIP7_PPU_FOR_IPE_ACTION_TABLE_FIELDS_ROT_0_INTERRUPT_INDEX_E

    /* ROT 1 */
    ,SIP7_PPU_FOR_IPE_ACTION_TABLE_FIELDS_ROT_1_SRC_REG_SEL_E

    /** When srcRegSel == _4BYTE_SET_CMD */
        ,SIP7_PPU_FOR_IPE_ACTION_TABLE_FIELDS_ROT_1_SRC_CMD_4BYTE_E

    /** when srcRegSel != _4BYTE_SET_CMD */
        ,SIP7_PPU_FOR_IPE_ACTION_TABLE_FIELDS_ROT_1_SRC_OFFSET_E
        ,SIP7_PPU_FOR_IPE_ACTION_TABLE_FIELDS_ROT_1_SRC_NUM_VAL_BITS_E

        /** when srcRegSel != _4BYTE_SET_CMD and func != CMP_REG */
            ,SIP7_PPU_FOR_IPE_ACTION_TABLE_FIELDS_ROT_1_SHIFT_LEFT_RIGHT_E
            ,SIP7_PPU_FOR_IPE_ACTION_TABLE_FIELDS_ROT_1_SHIFT_NUM_E
            ,SIP7_PPU_FOR_IPE_ACTION_TABLE_FIELDS_ROT_1_SET_BITS_NUM_E
            ,SIP7_PPU_FOR_IPE_ACTION_TABLE_FIELDS_ROT_1_SET_BITS_VAL_E
            ,SIP7_PPU_FOR_IPE_ACTION_TABLE_FIELDS_ROT_1_SET_BITS_OFFSET_E
            ,SIP7_PPU_FOR_IPE_ACTION_TABLE_FIELDS_ROT_1_ADD_SUB_CONST_E
            ,SIP7_PPU_FOR_IPE_ACTION_TABLE_FIELDS_ROT_1_ADD_SUB_CONST_SEL_E

        /** when srcRegSel != _4BYTE_SET_CMD and func == CMP_REG */
            ,SIP7_PPU_FOR_IPE_ACTION_TABLE_FIELDS_ROT_1_CMP_VAL_E
            ,SIP7_PPU_FOR_IPE_ACTION_TABLE_FIELDS_ROT_1_CMP_FALSE_VAL_LD_E
            ,SIP7_PPU_FOR_IPE_ACTION_TABLE_FIELDS_ROT_1_CMP_COND_E
            ,SIP7_PPU_FOR_IPE_ACTION_TABLE_FIELDS_ROT_1_CMP_MASK_E
            ,SIP7_PPU_FOR_IPE_ACTION_TABLE_FIELDS_ROT_1_CMP_TRUE_VAL_LD_E

    ,SIP7_PPU_FOR_IPE_ACTION_TABLE_FIELDS_ROT_1_FUNC_E
    ,SIP7_PPU_FOR_IPE_ACTION_TABLE_FIELDS_ROT_1_FUNC_SECOND_OPERAND_E
    ,SIP7_PPU_FOR_IPE_ACTION_TABLE_FIELDS_ROT_1_TARGET_E
    ,SIP7_PPU_FOR_IPE_ACTION_TABLE_FIELDS_ROT_1_LD_SP_BUS_NUM_BYTES_E
    ,SIP7_PPU_FOR_IPE_ACTION_TABLE_FIELDS_ROT_1_LD_SP_BUS_OFFSET_E
    ,SIP7_PPU_FOR_IPE_ACTION_TABLE_FIELDS_ROT_1_INTERRUPT_E
    ,SIP7_PPU_FOR_IPE_ACTION_TABLE_FIELDS_ROT_1_INTERRUPT_INDEX_E

    /* ROT 2 */
    ,SIP7_PPU_FOR_IPE_ACTION_TABLE_FIELDS_ROT_2_SRC_REG_SEL_E

    /** When srcRegSel == _4BYTE_SET_CMD */
        ,SIP7_PPU_FOR_IPE_ACTION_TABLE_FIELDS_ROT_2_SRC_CMD_4BYTE_E

    /** when srcRegSel != _4BYTE_SET_CMD */
        ,SIP7_PPU_FOR_IPE_ACTION_TABLE_FIELDS_ROT_2_SRC_OFFSET_E
        ,SIP7_PPU_FOR_IPE_ACTION_TABLE_FIELDS_ROT_2_SRC_NUM_VAL_BITS_E

        /** when srcRegSel != _4BYTE_SET_CMD and func != CMP_REG */
            ,SIP7_PPU_FOR_IPE_ACTION_TABLE_FIELDS_ROT_2_SHIFT_LEFT_RIGHT_E
            ,SIP7_PPU_FOR_IPE_ACTION_TABLE_FIELDS_ROT_2_SHIFT_NUM_E
            ,SIP7_PPU_FOR_IPE_ACTION_TABLE_FIELDS_ROT_2_SET_BITS_NUM_E
            ,SIP7_PPU_FOR_IPE_ACTION_TABLE_FIELDS_ROT_2_SET_BITS_VAL_E
            ,SIP7_PPU_FOR_IPE_ACTION_TABLE_FIELDS_ROT_2_SET_BITS_OFFSET_E
            ,SIP7_PPU_FOR_IPE_ACTION_TABLE_FIELDS_ROT_2_ADD_SUB_CONST_E
            ,SIP7_PPU_FOR_IPE_ACTION_TABLE_FIELDS_ROT_2_ADD_SUB_CONST_SEL_E

        /** when srcRegSel != _4BYTE_SET_CMD and func == CMP_REG */
            ,SIP7_PPU_FOR_IPE_ACTION_TABLE_FIELDS_ROT_2_CMP_VAL_E
            ,SIP7_PPU_FOR_IPE_ACTION_TABLE_FIELDS_ROT_2_CMP_FALSE_VAL_LD_E
            ,SIP7_PPU_FOR_IPE_ACTION_TABLE_FIELDS_ROT_2_CMP_COND_E
            ,SIP7_PPU_FOR_IPE_ACTION_TABLE_FIELDS_ROT_2_CMP_MASK_E
            ,SIP7_PPU_FOR_IPE_ACTION_TABLE_FIELDS_ROT_2_CMP_TRUE_VAL_LD_E

    ,SIP7_PPU_FOR_IPE_ACTION_TABLE_FIELDS_ROT_2_FUNC_E
    ,SIP7_PPU_FOR_IPE_ACTION_TABLE_FIELDS_ROT_2_FUNC_SECOND_OPERAND_E
    ,SIP7_PPU_FOR_IPE_ACTION_TABLE_FIELDS_ROT_2_TARGET_E
    ,SIP7_PPU_FOR_IPE_ACTION_TABLE_FIELDS_ROT_2_LD_SP_BUS_NUM_BYTES_E
    ,SIP7_PPU_FOR_IPE_ACTION_TABLE_FIELDS_ROT_2_LD_SP_BUS_OFFSET_E
    ,SIP7_PPU_FOR_IPE_ACTION_TABLE_FIELDS_ROT_2_INTERRUPT_E
    ,SIP7_PPU_FOR_IPE_ACTION_TABLE_FIELDS_ROT_2_INTERRUPT_INDEX_E

    /* ROT 3 */
    ,SIP7_PPU_FOR_IPE_ACTION_TABLE_FIELDS_ROT_3_SRC_REG_SEL_E

    /** When srcRegSel == _4BYTE_SET_CMD */
        ,SIP7_PPU_FOR_IPE_ACTION_TABLE_FIELDS_ROT_3_SRC_CMD_4BYTE_E

    /** when srcRegSel != _4BYTE_SET_CMD */
        ,SIP7_PPU_FOR_IPE_ACTION_TABLE_FIELDS_ROT_3_SRC_OFFSET_E
        ,SIP7_PPU_FOR_IPE_ACTION_TABLE_FIELDS_ROT_3_SRC_NUM_VAL_BITS_E

        /** when srcRegSel != _4BYTE_SET_CMD and func != CMP_REG */
            ,SIP7_PPU_FOR_IPE_ACTION_TABLE_FIELDS_ROT_3_SHIFT_LEFT_RIGHT_E
            ,SIP7_PPU_FOR_IPE_ACTION_TABLE_FIELDS_ROT_3_SHIFT_NUM_E
            ,SIP7_PPU_FOR_IPE_ACTION_TABLE_FIELDS_ROT_3_SET_BITS_NUM_E
            ,SIP7_PPU_FOR_IPE_ACTION_TABLE_FIELDS_ROT_3_SET_BITS_VAL_E
            ,SIP7_PPU_FOR_IPE_ACTION_TABLE_FIELDS_ROT_3_SET_BITS_OFFSET_E
            ,SIP7_PPU_FOR_IPE_ACTION_TABLE_FIELDS_ROT_3_ADD_SUB_CONST_E
            ,SIP7_PPU_FOR_IPE_ACTION_TABLE_FIELDS_ROT_3_ADD_SUB_CONST_SEL_E

        /** when srcRegSel != _4BYTE_SET_CMD and func == CMP_REG */
            ,SIP7_PPU_FOR_IPE_ACTION_TABLE_FIELDS_ROT_3_CMP_VAL_E
            ,SIP7_PPU_FOR_IPE_ACTION_TABLE_FIELDS_ROT_3_CMP_FALSE_VAL_LD_E
            ,SIP7_PPU_FOR_IPE_ACTION_TABLE_FIELDS_ROT_3_CMP_COND_E
            ,SIP7_PPU_FOR_IPE_ACTION_TABLE_FIELDS_ROT_3_CMP_MASK_E
            ,SIP7_PPU_FOR_IPE_ACTION_TABLE_FIELDS_ROT_3_CMP_TRUE_VAL_LD_E

    ,SIP7_PPU_FOR_IPE_ACTION_TABLE_FIELDS_ROT_3_FUNC_E
    ,SIP7_PPU_FOR_IPE_ACTION_TABLE_FIELDS_ROT_3_FUNC_SECOND_OPERAND_E
    ,SIP7_PPU_FOR_IPE_ACTION_TABLE_FIELDS_ROT_3_TARGET_E
    ,SIP7_PPU_FOR_IPE_ACTION_TABLE_FIELDS_ROT_3_LD_SP_BUS_NUM_BYTES_E
    ,SIP7_PPU_FOR_IPE_ACTION_TABLE_FIELDS_ROT_3_LD_SP_BUS_OFFSET_E
    ,SIP7_PPU_FOR_IPE_ACTION_TABLE_FIELDS_ROT_3_INTERRUPT_E
    ,SIP7_PPU_FOR_IPE_ACTION_TABLE_FIELDS_ROT_3_INTERRUPT_INDEX_E

    /* ROT 4 */
    ,SIP7_PPU_FOR_IPE_ACTION_TABLE_FIELDS_ROT_4_SRC_REG_SEL_E

    /** When srcRegSel == _4BYTE_SET_CMD */
        ,SIP7_PPU_FOR_IPE_ACTION_TABLE_FIELDS_ROT_4_SRC_CMD_4BYTE_E

    /** when srcRegSel != _4BYTE_SET_CMD */
        ,SIP7_PPU_FOR_IPE_ACTION_TABLE_FIELDS_ROT_4_SRC_OFFSET_E
        ,SIP7_PPU_FOR_IPE_ACTION_TABLE_FIELDS_ROT_4_SRC_NUM_VAL_BITS_E

        /** when srcRegSel != _4BYTE_SET_CMD and func != CMP_REG */
            ,SIP7_PPU_FOR_IPE_ACTION_TABLE_FIELDS_ROT_4_SHIFT_LEFT_RIGHT_E
            ,SIP7_PPU_FOR_IPE_ACTION_TABLE_FIELDS_ROT_4_SHIFT_NUM_E
            ,SIP7_PPU_FOR_IPE_ACTION_TABLE_FIELDS_ROT_4_SET_BITS_NUM_E
            ,SIP7_PPU_FOR_IPE_ACTION_TABLE_FIELDS_ROT_4_SET_BITS_VAL_E
            ,SIP7_PPU_FOR_IPE_ACTION_TABLE_FIELDS_ROT_4_SET_BITS_OFFSET_E
            ,SIP7_PPU_FOR_IPE_ACTION_TABLE_FIELDS_ROT_4_ADD_SUB_CONST_E
            ,SIP7_PPU_FOR_IPE_ACTION_TABLE_FIELDS_ROT_4_ADD_SUB_CONST_SEL_E

        /** when srcRegSel != _4BYTE_SET_CMD and func == CMP_REG */
            ,SIP7_PPU_FOR_IPE_ACTION_TABLE_FIELDS_ROT_4_CMP_VAL_E
            ,SIP7_PPU_FOR_IPE_ACTION_TABLE_FIELDS_ROT_4_CMP_FALSE_VAL_LD_E
            ,SIP7_PPU_FOR_IPE_ACTION_TABLE_FIELDS_ROT_4_CMP_COND_E
            ,SIP7_PPU_FOR_IPE_ACTION_TABLE_FIELDS_ROT_4_CMP_MASK_E
            ,SIP7_PPU_FOR_IPE_ACTION_TABLE_FIELDS_ROT_4_CMP_TRUE_VAL_LD_E

    ,SIP7_PPU_FOR_IPE_ACTION_TABLE_FIELDS_ROT_4_FUNC_E
    ,SIP7_PPU_FOR_IPE_ACTION_TABLE_FIELDS_ROT_4_FUNC_SECOND_OPERAND_E
    ,SIP7_PPU_FOR_IPE_ACTION_TABLE_FIELDS_ROT_4_TARGET_E
    ,SIP7_PPU_FOR_IPE_ACTION_TABLE_FIELDS_ROT_4_LD_SP_BUS_NUM_BYTES_E
    ,SIP7_PPU_FOR_IPE_ACTION_TABLE_FIELDS_ROT_4_LD_SP_BUS_OFFSET_E
    ,SIP7_PPU_FOR_IPE_ACTION_TABLE_FIELDS_ROT_4_INTERRUPT_E
    ,SIP7_PPU_FOR_IPE_ACTION_TABLE_FIELDS_ROT_4_INTERRUPT_INDEX_E

    ,SIP7_PPU_FOR_IPE_ACTION_TABLE_FIELDS_SET_NEXT_STATE_E
    ,SIP7_PPU_FOR_IPE_ACTION_TABLE_FIELDS_SET_CONST_NEXT_SHIFT_E
    ,SIP7_PPU_FOR_IPE_ACTION_TABLE_FIELDS_SET_LOOPBACK_E
    ,SIP7_PPU_FOR_IPE_ACTION_TABLE_FIELDS_COUNTER_SET_E
    ,SIP7_PPU_FOR_IPE_ACTION_TABLE_FIELDS_COUNTER_SET_VAL_E
    ,SIP7_PPU_FOR_IPE_ACTION_TABLE_FIELDS_COUNTER_OPER_E

    ,SIP7_PPU_FOR_IPE_ACTION_TABLE_FIELDS___LAST_VALUE___E /* used for array size */
}SIP7_PPU_FOR_IPE_ACTION_TABLE_FIELDS_ENT;


typedef enum {

     SIP7_EGF_QAG_QUEUE_MAP_TABLE_TABLE_FIELDS_DP_QUEUE_INDEX_E
    ,SIP7_EGF_QAG_QUEUE_MAP_TABLE_TABLE_FIELDS___LAST_VALUE___E/* used for array size */

}SIP7_EGF_QAG_QMAP_TABLE_FIELDS_ENT;

/* the fields of the (MLL) IP MLL BIER entry format in Sip7 */
typedef enum {

     SIP7_IP_MLL_BIER_TABLE_FIELDS_LAST_0_E
    ,SIP7_IP_MLL_BIER_TABLE_FIELDS_START_OF_TUNNEL_0_E
    ,SIP7_IP_MLL_BIER_TABLE_FIELDS_MLL_RPF_FAIL_CMD_0_E
    ,SIP7_IP_MLL_BIER_TABLE_FIELDS_MLL_EVID_0_E
    ,SIP7_IP_MLL_BIER_TABLE_FIELDS_USE_VIDX_0_E
    ,SIP7_IP_MLL_BIER_TABLE_FIELDS_TARGET_IS_TRUNK_0_E
    ,SIP7_IP_MLL_BIER_TABLE_FIELDS_EVIDX_0_E
    ,SIP7_IP_MLL_BIER_TABLE_FIELDS_TRG_EPORT_0_E
    ,SIP7_IP_MLL_BIER_TABLE_FIELDS_TRG_TRUNK_ID_0_E
    ,SIP7_IP_MLL_BIER_TABLE_FIELDS_RESERVED_0_E
    ,SIP7_IP_MLL_BIER_TABLE_FIELDS_TRG_DEV_0_E
    ,SIP7_IP_MLL_BIER_TABLE_FIELDS_EXCLUDE_SRC_VLAN_0_E
    ,SIP7_IP_MLL_BIER_TABLE_FIELDS_TTL_THRESHOLD_0_OR_HOP_LIMIT_THRESHOLD_0_E
    ,SIP7_IP_MLL_BIER_TABLE_FIELDS_TUNNEL_PTR_0_E
    ,SIP7_IP_MLL_BIER_TABLE_FIELDS_TUNNEL_TYPE_0_E
    ,SIP7_IP_MLL_BIER_TABLE_FIELDS_LAST_1_E
    ,SIP7_IP_MLL_BIER_TABLE_FIELDS_START_OF_TUNNEL_1_E
    ,SIP7_IP_MLL_BIER_TABLE_FIELDS_MLL_RPF_FAIL_CMD_1_E
    ,SIP7_IP_MLL_BIER_TABLE_FIELDS_MLL_EVID_1_E
    ,SIP7_IP_MLL_BIER_TABLE_FIELDS_USE_VIDX_1_E
    ,SIP7_IP_MLL_BIER_TABLE_FIELDS_TARGET_IS_TRUNK_1_E
    ,SIP7_IP_MLL_BIER_TABLE_FIELDS_EVIDX_1_E
    ,SIP7_IP_MLL_BIER_TABLE_FIELDS_TRG_EPORT_1_E
    ,SIP7_IP_MLL_BIER_TABLE_FIELDS_TRG_TRUNK_ID_1_E
    ,SIP7_IP_MLL_BIER_TABLE_FIELDS_RESERVED_1_E
    ,SIP7_IP_MLL_BIER_TABLE_FIELDS_TRG_DEV_1_E
    ,SIP7_IP_MLL_BIER_TABLE_FIELDS_EXCLUDE_SRC_VLAN_1_E
    ,SIP7_IP_MLL_BIER_TABLE_FIELDS_TTL_THRESHOLD_1_OR_HOP_LIMIT_THRESHOLD_1_E
    ,SIP7_IP_MLL_BIER_TABLE_FIELDS_TUNNEL_PTR_1_E
    ,SIP7_IP_MLL_BIER_TABLE_FIELDS_TUNNEL_TYPE_1_E
    ,SIP7_IP_MLL_BIER_TABLE_FIELDS_NEXT_MLL_PTR_E
    ,SIP7_IP_MLL_BIER_TABLE_FIELDS_DISABLE_MAC_SA_MODIFICATION_0_E
    ,SIP7_IP_MLL_BIER_TABLE_FIELDS_USE_VPORT_0_E
    ,SIP7_IP_MLL_BIER_TABLE_FIELDS_VPORT_0_E
    ,SIP7_IP_MLL_BIER_TABLE_FIELDS_DISABLE_MAC_SA_MODIFICATION_1_E
    ,SIP7_IP_MLL_BIER_TABLE_FIELDS_USE_VPORT_1_E
    ,SIP7_IP_MLL_BIER_TABLE_FIELDS_VPORT_1_E
    ,SIP7_IP_MLL_BIER_TABLE_FIELDS_RESERVED_2_E

    ,SIP7_IP_MLL_BIER_TABLE_FIELDS___LAST_VALUE___E/* used for array size */
}SIP7_IP_MLL_BIER_TABLE_FIELDS_ENT;

/* the fields of the (MLL) L2 MLL BIER entry format in Sip7 */
typedef enum {

     SIP7_L2_MLL_BIER_TABLE_FIELDS_LAST_0_E
    ,SIP7_L2_MLL_BIER_TABLE_FIELDS_BIND_TO_MLL_COUNTER_0_E
    ,SIP7_L2_MLL_BIER_TABLE_FIELDS_MASK_BITMAP_0_E
    ,SIP7_L2_MLL_BIER_TABLE_FIELDS_E_TREE_LEAF0_E
    ,SIP7_L2_MLL_BIER_TABLE_FIELDS_BIER_MASK_PACKET_BIT_STRING_0_E
    ,SIP7_L2_MLL_BIER_TABLE_FIELDS_RESERVED_0_E
    ,SIP7_L2_MLL_BIER_TABLE_FIELDS_USE_VIDX_0_E
    ,SIP7_L2_MLL_BIER_TABLE_FIELDS_TARGET_IS_TRUNK_0_E
    ,SIP7_L2_MLL_BIER_TABLE_FIELDS_TRG_EPORT_0_E
    ,SIP7_L2_MLL_BIER_TABLE_FIELDS_TRG_TRUNK_ID_0_E
    ,SIP7_L2_MLL_BIER_TABLE_FIELDS_VIDX_0_E
    ,SIP7_L2_MLL_BIER_TABLE_FIELDS_UNKNOWN_UC_FILTER_ENABLE_0_E
    ,SIP7_L2_MLL_BIER_TABLE_FIELDS_UNREGISTERED_MC_FILTER_ENABLE_0_E
    ,SIP7_L2_MLL_BIER_TABLE_FIELDS_BC_FILTER_ENABLE_0_E
    ,SIP7_L2_MLL_BIER_TABLE_FIELDS_TRG_DEV_0_E
    ,SIP7_L2_MLL_BIER_TABLE_FIELDS_ONE_PLUS_ONE_FILTERING_ENABLE_0_E
    ,SIP7_L2_MLL_BIER_TABLE_FIELDS_TTL_THRESHOLD_0_E
    ,SIP7_L2_MLL_BIER_TABLE_FIELDS_MESH_ID_0_E
    ,SIP7_L2_MLL_BIER_TABLE_FIELDS_MC_LOCAL_SWITCHING_ENABLE_0_E
    ,SIP7_L2_MLL_BIER_TABLE_FIELDS_MAX_HOP_COUNT_ENABLE_0_E
    ,SIP7_L2_MLL_BIER_TABLE_FIELDS_MAX_OUTGOING_HOP_COUNT_0_E
    ,SIP7_L2_MLL_BIER_TABLE_FIELDS_RESERVED_1_E

    ,SIP7_L2_MLL_BIER_TABLE_FIELDS_LAST_1_E
    ,SIP7_L2_MLL_BIER_TABLE_FIELDS_BIND_TO_MLL_COUNTER_1_E
    ,SIP7_L2_MLL_BIER_TABLE_FIELDS_MASK_BITMAP_1_E
    ,SIP7_L2_MLL_BIER_TABLE_FIELDS_E_TREE_LEAF1_E
    ,SIP7_L2_MLL_BIER_TABLE_FIELDS_BIER_MASK_PACKET_BIT_STRING_1_E
    ,SIP7_L2_MLL_BIER_TABLE_FIELDS_RESERVED_2_E
    ,SIP7_L2_MLL_BIER_TABLE_FIELDS_USE_VIDX_1_E
    ,SIP7_L2_MLL_BIER_TABLE_FIELDS_TARGET_IS_TRUNK_1_E
    ,SIP7_L2_MLL_BIER_TABLE_FIELDS_TRG_EPORT_1_E
    ,SIP7_L2_MLL_BIER_TABLE_FIELDS_TRG_TRUNK_ID_1_E
    ,SIP7_L2_MLL_BIER_TABLE_FIELDS_VIDX_1_E
    ,SIP7_L2_MLL_BIER_TABLE_FIELDS_UNKNOWN_UC_FILTER_ENABLE_1_E
    ,SIP7_L2_MLL_BIER_TABLE_FIELDS_UNREGISTERED_MC_FILTER_ENABLE_1_E
    ,SIP7_L2_MLL_BIER_TABLE_FIELDS_BC_FILTER_ENABLE_1_E
    ,SIP7_L2_MLL_BIER_TABLE_FIELDS_TRG_DEV_1_E
    ,SIP7_L2_MLL_BIER_TABLE_FIELDS_ONE_PLUS_ONE_FILTERING_ENABLE_1_E
    ,SIP7_L2_MLL_BIER_TABLE_FIELDS_TTL_THRESHOLD_1_E
    ,SIP7_L2_MLL_BIER_TABLE_FIELDS_MESH_ID_1_E
    ,SIP7_L2_MLL_BIER_TABLE_FIELDS_MC_LOCAL_SWITCHING_ENABLE_1_E
    ,SIP7_L2_MLL_BIER_TABLE_FIELDS_MAX_HOP_COUNT_ENABLE_1_E
    ,SIP7_L2_MLL_BIER_TABLE_FIELDS_MAX_OUTGOING_HOP_COUNT_1_E
    ,SIP7_L2_MLL_BIER_TABLE_FIELDS_RESERVED_3_E

    ,SIP7_L2_MLL_BIER_TABLE_FIELDS_ENTRY_SELECTOR_E
    ,SIP7_L2_MLL_BIER_TABLE_FIELDS_L2_NEXT_MLL_PTR_E

    ,SIP7_L2_MLL_BIER_TABLE_FIELDS_USE_VPORT_0_E
    ,SIP7_L2_MLL_BIER_TABLE_FIELDS_VPORT_0_E
    ,SIP7_L2_MLL_BIER_TABLE_FIELDS_USE_VPORT_1_E
    ,SIP7_L2_MLL_BIER_TABLE_FIELDS_VPORT_1_E

    ,SIP7_L2_MLL_BIER_TABLE_FIELDS_BIER_F_BM_ENTRY_0_E
    ,SIP7_L2_MLL_BIER_TABLE_FIELDS_BIER_F_BM_ENTRY_1_E
    ,SIP7_L2_MLL_BIER_TABLE_FIELDS_RESERVED_4_E

    ,SIP7_L2_MLL_BIER_TABLE_FIELDS___LAST_VALUE___E/* used for array size */
}SIP7_L2_MLL_BIER_TABLE_FIELDS_ENT;



/* macro to set value to field of (IPE) State Addres Profile format in buffer */
#define SIP7_IPE_STATE_ADDRESS_PROFILE_FIELD_SET_MAC(_dev,_hwDataArr,_fieldName,_value)    \
    U32_SET_FIELD_BY_ID_MAC(_hwDataArr,                             \
        PRV_TABLE_FORMAT_INFO(_dev)[PRV_CPSS_DXCH_TABLE_FORMAT_IPE_STATE_ADDRESS_PROFILE_E].fieldsInfoPtr, \
        _fieldName,                                                 \
        _value)

/* macro to get field value of (IPE) State Addres Profile format in buffer */
#define SIP7_IPE_STATE_ADDRESS_PROFILE_FIELD_GET_MAC(_dev,_hwDataArr,_fieldName,_value)    \
    U32_GET_FIELD_BY_ID_MAC(_hwDataArr,                             \
        PRV_TABLE_FORMAT_INFO(_dev)[PRV_CPSS_DXCH_TABLE_FORMAT_IPE_STATE_ADDRESS_PROFILE_E].fieldsInfoPtr, \
        _fieldName,                                                 \
        _value)


/* macro to set value to field of (PPU for IPE) Action table format in buffer */
#define SIP7_PPU_FOR_IPE_ACTION_TABLE_FIELD_SET_MAC(_dev,_hwDataArr,_fieldName,_value)    \
    U32_SET_FIELD_BY_ID_MAC(_hwDataArr,                             \
        PRV_TABLE_FORMAT_INFO(_dev)[PRV_CPSS_DXCH_TABLE_FORMAT_PPU_FOR_IPE_ACTION_E].fieldsInfoPtr, \
        _fieldName,                                                 \
        _value)


/* macro to get field value of (PPU for IPE) Action table format in buffer */
#define SIP7_PPU_FOR_IPE_ACTION_TABLE_FIELD_GET_MAC(_dev,_hwDataArr,_fieldName,_value)    \
    U32_GET_FIELD_BY_ID_MAC(_hwDataArr,                             \
        PRV_TABLE_FORMAT_INFO(_dev)[PRV_CPSS_DXCH_TABLE_FORMAT_PPU_FOR_IPE_ACTION_E].fieldsInfoPtr, \
        _fieldName,                                                 \
        _value)


/* macro to set value to field of (HA) IPv4 VPorts Tunnel Start format in buffer */
#define SIP7_HA_IPV4_VPORT_TUNNEL_START_FIELD_SET_MAC(_dev,_hwDataArr,_fieldName,_value)    \
    U32_SET_FIELD_BY_ID_MAC(_hwDataArr,                             \
        PRV_TABLE_FORMAT_INFO(_dev)[PRV_CPSS_DXCH_TABLE_FORMAT_HA_IPV4_VPORT_TUNNEL_START_E].fieldsInfoPtr, \
        _fieldName,                                                 \
        _value)

/* macro to get field value of (HA) IPv4 VPorts Tunnel Start format in buffer */
#define SIP7_HA_IPV4_VPORT_TUNNEL_START_FIELD_GET_MAC(_dev,_hwDataArr,_fieldName,_value)    \
    U32_GET_FIELD_BY_ID_MAC(_hwDataArr,                             \
        PRV_TABLE_FORMAT_INFO(_dev)[PRV_CPSS_DXCH_TABLE_FORMAT_HA_IPV4_VPORT_TUNNEL_START_E].fieldsInfoPtr, \
        _fieldName,                                                 \
        _value)

/* macro to set value to field of (HA) IPv6 VPorts Tunnel Start format in buffer */
#define SIP7_HA_IPV6_VPORT_TUNNEL_START_FIELD_SET_MAC(_dev,_hwDataArr,_fieldName,_value)    \
    U32_SET_FIELD_BY_ID_MAC(_hwDataArr,                             \
        PRV_TABLE_FORMAT_INFO(_dev)[PRV_CPSS_DXCH_TABLE_FORMAT_HA_IPV6_VPORT_TUNNEL_START_E].fieldsInfoPtr, \
        _fieldName,                                                 \
        _value)

/* macro to get field value of (HA) IPv6 VPorts Tunnel Start format in buffer */
#define SIP7_HA_IPV6_VPORT_TUNNEL_START_FIELD_GET_MAC(_dev,_hwDataArr,_fieldName,_value)    \
    U32_GET_FIELD_BY_ID_MAC(_hwDataArr,                             \
        PRV_TABLE_FORMAT_INFO(_dev)[PRV_CPSS_DXCH_TABLE_FORMAT_HA_IPV6_VPORT_TUNNEL_START_E].fieldsInfoPtr, \
        _fieldName,                                                 \
        _value)

/* macro to set value to field of (HA) MPLS VPorts Tunnel Start format in buffer */
#define SIP7_HA_MPLS_VPORT_TUNNEL_START_FIELD_SET_MAC(_dev,_hwDataArr,_fieldName,_value)    \
    U32_SET_FIELD_BY_ID_MAC(_hwDataArr,                             \
        PRV_TABLE_FORMAT_INFO(_dev)[PRV_CPSS_DXCH_TABLE_FORMAT_HA_MPLS_VPORT_TUNNEL_START_E].fieldsInfoPtr, \
        _fieldName,                                                 \
        _value)

/* macro to get field value of (HA) MPLS VPorts Tunnel Start format in buffer */
#define SIP7_HA_MPLS_VPORT_TUNNEL_START_FIELD_GET_MAC(_dev,_hwDataArr,_fieldName,_value)    \
    U32_GET_FIELD_BY_ID_MAC(_hwDataArr,                             \
        PRV_TABLE_FORMAT_INFO(_dev)[PRV_CPSS_DXCH_TABLE_FORMAT_HA_MPLS_VPORT_TUNNEL_START_E].fieldsInfoPtr, \
        _fieldName,                                                 \
        _value)

/* macro to set value to field of (HA) Ingress ePort 1 format in buffer */
#define SIP7_HA_SRC_EPORT_1_FIELD_SET_MAC(_dev,_hwDataArr,_fieldName,_value)    \
    U32_SET_FIELD_BY_ID_MAC(_hwDataArr,                             \
        PRV_TABLE_FORMAT_INFO(_dev)[PRV_CPSS_DXCH_TABLE_FORMAT_HA_SRC_EPORT_1_E].fieldsInfoPtr, \
        _fieldName,                                                 \
        _value)

/* macro to get field value of (HA) Ingress ePort 1 format in buffer */
#define SIP7_HA_SRC_EPORT_1_FIELD_GET_MAC(_dev,_hwDataArr,_fieldName,_value)    \
    U32_GET_FIELD_BY_ID_MAC(_hwDataArr,                             \
        PRV_TABLE_FORMAT_INFO(_dev)[PRV_CPSS_DXCH_TABLE_FORMAT_HA_SRC_EPORT_1_E].fieldsInfoPtr, \
        _fieldName,                                                 \
        _value)

/* macro to set value to field of (HA) Ingress ePort 2 format in buffer */
#define SIP7_HA_SRC_EPORT_2_FIELD_SET_MAC(_dev,_hwDataArr,_fieldName,_value)    \
    U32_SET_FIELD_BY_ID_MAC(_hwDataArr,                             \
        PRV_TABLE_FORMAT_INFO(_dev)[PRV_CPSS_DXCH_TABLE_FORMAT_HA_SRC_EPORT_2_E].fieldsInfoPtr, \
        _fieldName,                                                 \
        _value)

/* macro to get field value of (HA) Ingress ePort 2 format in buffer */
#define SIP7_HA_SRC_EPORT_2_FIELD_GET_MAC(_dev,_hwDataArr,_fieldName,_value)    \
    U32_GET_FIELD_BY_ID_MAC(_hwDataArr,                             \
        PRV_TABLE_FORMAT_INFO(_dev)[PRV_CPSS_DXCH_TABLE_FORMAT_HA_SRC_EPORT_2_E].fieldsInfoPtr, \
        _fieldName,                                                 \
        _value)

/* macro to set value to field of (HA) Ingress physical port 2 format in buffer */
#define SIP7_HA_SRC_PHYSICAL_PORT_2_FIELD_SET_MAC(_dev,_hwDataArr,_fieldName,_value)    \
    U32_SET_FIELD_BY_ID_MAC(_hwDataArr,                             \
        PRV_TABLE_FORMAT_INFO(_dev)[PRV_CPSS_DXCH_TABLE_FORMAT_HA_SRC_PHYSICAL_PORT_2_E].fieldsInfoPtr, \
        _fieldName,                                                 \
        _value)

/* macro to get field value of (HA) Ingress physical port 2 format in buffer */
#define SIP7_HA_SRC_PHYSICAL_PORT_2_FIELD_GET_MAC(_dev,_hwDataArr,_fieldName,_value)    \
    U32_GET_FIELD_BY_ID_MAC(_hwDataArr,                             \
        PRV_TABLE_FORMAT_INFO(_dev)[PRV_CPSS_DXCH_TABLE_FORMAT_HA_SRC_PHYSICAL_PORT_2_E].fieldsInfoPtr, \
        _fieldName,                                                 \
        _value)

/* macro to set value to field of (HA) target circuits format in buffer */
#define SIP7_HA_TARGET_CIRCUITS_FIELD_SET_MAC(_dev,_hwDataArr,_fieldName,_value)    \
    U32_SET_FIELD_BY_ID_MAC(_hwDataArr,                             \
        PRV_TABLE_FORMAT_INFO(_dev)[PRV_CPSS_DXCH_TABLE_FORMAT_HA_TARGET_CIRCUITS_E].fieldsInfoPtr, \
        _fieldName,                                                 \
        _value)

/* macro to get field value of (HA) target circuits format in buffer */
#define SIP7_HA_TARGET_CIRCUITS_FIELD_GET_MAC(_dev,_hwDataArr,_fieldName,_value)    \
    U32_GET_FIELD_BY_ID_MAC(_hwDataArr,                             \
        PRV_TABLE_FORMAT_INFO(_dev)[PRV_CPSS_DXCH_TABLE_FORMAT_HA_TARGET_CIRCUITS_E].fieldsInfoPtr, \
        _fieldName,                                                 \
        _value)

/* macro to set value to field of (HA) Analyzers target circuits format in buffer */
#define SIP7_HA_ANALYZERS_TARGET_CIRCUITS_FIELD_SET_MAC(_dev,_hwDataArr,_fieldName,_value)    \
    U32_SET_FIELD_BY_ID_MAC(_hwDataArr,                             \
        PRV_TABLE_FORMAT_INFO(_dev)[PRV_CPSS_DXCH_TABLE_FORMAT_HA_ANALYZERS_TARGET_CIRCUITS_E].fieldsInfoPtr, \
        _fieldName,                                                 \
        _value)

/* macro to get field value of (HA) Analyzers target circuits format in buffer */
#define SIP7_HA_ANALYZERS_TARGET_CIRCUITS_FIELD_GET_MAC(_dev,_hwDataArr,_fieldName,_value)    \
    U32_GET_FIELD_BY_ID_MAC(_hwDataArr,                             \
        PRV_TABLE_FORMAT_INFO(_dev)[PRV_CPSS_DXCH_TABLE_FORMAT_HA_ANALYZERS_TARGET_CIRCUITS_E].fieldsInfoPtr, \
        _fieldName,                                                 \
        _value)

/* macro to set value to field of (HA) Queue mapping format in buffer */
#define SIP7_HA_QUEUE_MAPPING_FIELD_SET_MAC(_dev,_hwDataArr,_fieldName,_value)    \
    U32_SET_FIELD_BY_ID_MAC(_hwDataArr,                             \
        PRV_TABLE_FORMAT_INFO(_dev)[PRV_CPSS_DXCH_TABLE_FORMAT_HA_QUEUE_MAPPING_E].fieldsInfoPtr, \
        _fieldName,                                                 \
        _value)

/* macro to get field value of (HA) Queue mapping format in buffer */
#define SIP7_HA_QUEUE_MAPPING_FIELD_GET_MAC(_dev,_hwDataArr,_fieldName,_value)    \
    U32_GET_FIELD_BY_ID_MAC(_hwDataArr,                             \
        PRV_TABLE_FORMAT_INFO(_dev)[PRV_CPSS_DXCH_TABLE_FORMAT_HA_QUEUE_MAPPING_E].fieldsInfoPtr, \
        _fieldName,                                                 \
        _value)

/* macro to set value to field of (HA) QoS mapping format in buffer */
#define SIP7_HA_QOS_MAPPING_FIELD_SET_MAC(_dev,_hwDataArr,_fieldName,_value)    \
    U32_SET_FIELD_BY_ID_MAC(_hwDataArr,                             \
        PRV_TABLE_FORMAT_INFO(_dev)[PRV_CPSS_DXCH_TABLE_FORMAT_HA_QOS_MAPPING_E].fieldsInfoPtr, \
        _fieldName,                                                 \
        _value)

/* macro to get field value of (HA) QoS mapping format in buffer */
#define SIP7_HA_QOS_MAPPING_FIELD_GET_MAC(_dev,_hwDataArr,_fieldName,_value)    \
    U32_GET_FIELD_BY_ID_MAC(_hwDataArr,                             \
        PRV_TABLE_FORMAT_INFO(_dev)[PRV_CPSS_DXCH_TABLE_FORMAT_HA_QOS_MAPPING_E].fieldsInfoPtr, \
        _fieldName,                                                 \
        _value)

/* macro to set value to field of (HA) Header fields 0 format in buffer */
#define SIP7_HA_HEADER_FIELDS_FIELD_SET_MAC(_dev,_hwDataArr,_fieldName,_value)    \
    U32_SET_FIELD_BY_ID_MAC(_hwDataArr,                             \
        PRV_TABLE_FORMAT_INFO(_dev)[PRV_CPSS_DXCH_TABLE_FORMAT_HA_HEADER_FIELDS_E].fieldsInfoPtr, \
        _fieldName,                                                 \
        _value)

/* macro to get field value of (HA) Header fields 0 format in buffer */
#define SIP7_HA_HEADER_FIELDS_FIELD_GET_MAC(_dev,_hwDataArr,_fieldName,_value)    \
    U32_GET_FIELD_BY_ID_MAC(_hwDataArr,                             \
        PRV_TABLE_FORMAT_INFO(_dev)[PRV_CPSS_DXCH_TABLE_FORMAT_HA_HEADER_FIELDS_E].fieldsInfoPtr, \
        _fieldName,                                                 \
        _value)

/* macro to set value to field of (IPVX) Router L3NHE Profile format in buffer */
#define SIP7_IPVX_ROUTER_L3NHE_PROFILE_FIELD_SET_MAC(_dev,_hwDataArr,_fieldName,_value)    \
    U32_SET_FIELD_BY_ID_MAC(_hwDataArr,                             \
        PRV_TABLE_FORMAT_INFO(_dev)[PRV_CPSS_DXCH_TABLE_FORMAT_IPVX_ROUTER_L3NHE_PROFILE_E].fieldsInfoPtr, \
        _fieldName,                                                 \
        _value)

/* macro to get field value of (IPVX) Router L3NHE Profile format in buffer */
#define SIP7_IPVX_ROUTER_L3NHE_PROFILE_FIELD_GET_MAC(_dev,_hwDataArr,_fieldName,_value)    \
    U32_GET_FIELD_BY_ID_MAC(_hwDataArr,                             \
        PRV_TABLE_FORMAT_INFO(_dev)[PRV_CPSS_DXCH_TABLE_FORMAT_IPVX_ROUTER_L3NHE_PROFILE_E].fieldsInfoPtr, \
        _fieldName,                                                 \
        _value)


/* macro to set value to field of (MLL) IP MLL BIER entry format in buffer */
#define SIP7_IP_MLL_BIER_FIELD_SET_MAC(_dev,_hwDataArr,_fieldName,_value)                               \
    U32_SET_FIELD_BY_ID_MAC(_hwDataArr,                                                                 \
        PRV_TABLE_FORMAT_INFO(_dev)[PRV_CPSS_DXCH_TABLE_FORMAT_IP_MLL_BIER_E].fieldsInfoPtr,            \
        _fieldName,                                                                                     \
        _value)

/* macro to get value to field of (MLL) IP MLL BIER entry format in buffer */
#define SIP7_IP_MLL_BIER_FIELD_GET_MAC(_dev,_hwDataArr,_fieldName,_value)                               \
    U32_GET_FIELD_BY_ID_MAC(_hwDataArr,                                                                 \
        PRV_TABLE_FORMAT_INFO(_dev)[PRV_CPSS_DXCH_TABLE_FORMAT_IP_MLL_BIER_E].fieldsInfoPtr,            \
        _fieldName,                                                                                     \
        _value)

/* macro to get field's info (start bit, length) of IP MLL BIER entry */
#define SIP7_IP_MLL_BIER_FIELD_INFO_GET_MAC(_dev, _fieldName,_startBit, _numOfBits)                     \
    GET_FIELD_INFO_BY_ID_MAC(                                                                           \
        PRV_TABLE_FORMAT_INFO(_dev)[PRV_CPSS_DXCH_TABLE_FORMAT_IP_MLL_BIER_E].fieldsInfoPtr,            \
        _fieldName,                                                                                     \
        _startBit,                                                                                      \
        _numOfBits)

/* macro to set value to field of IP MLL BIER entry format in buffer nad raise bits appropriate to field
 * in the mask buffer */
#define SIP7_IP_MLL_BIER_FIELD_AND_MASK_SET_MAC(_dev, _hwDataArr, _hwMaskArr, _fieldName, _value)       \
    U32_SET_FIELD_AND_MASK_BY_ID_MAC(                                                                   \
        _hwDataArr, _hwMaskArr,                                                                         \
        PRV_TABLE_FORMAT_INFO(_dev)[PRV_CPSS_DXCH_TABLE_FORMAT_IP_MLL_BIER_E].fieldsInfoPtr,            \
        _fieldName,                                                                                     \
        _value)

/* macro to set value to field of (MLL) L2 MLL BIER entry format in buffer */
#define SIP7_L2_MLL_BIER_FIELD_SET_MAC(_dev,_hwDataArr,_fieldName,_value)                               \
    U32_SET_FIELD_BY_ID_MAC(_hwDataArr,                                                                 \
        PRV_TABLE_FORMAT_INFO(_dev)[PRV_CPSS_DXCH_TABLE_FORMAT_L2_MLL_BIER_E].fieldsInfoPtr,            \
        _fieldName,                                                                                     \
        _value)

/* macro to get value to field of (MLL) L2 MLL BIER entry format in buffer */
#define SIP7_L2_MLL_BIER_FIELD_GET_MAC(_dev,_hwDataArr,_fieldName,_value)                               \
    U32_GET_FIELD_BY_ID_MAC(_hwDataArr,                                                                 \
        PRV_TABLE_FORMAT_INFO(_dev)[PRV_CPSS_DXCH_TABLE_FORMAT_L2_MLL_BIER_E].fieldsInfoPtr,            \
        _fieldName,                                                                                     \
        _value)

/* macro to get field's info (start bit, length) of IP MLL BIER entry */
#define SIP7_L2_MLL_BIER_FIELD_INFO_GET_MAC(_dev,_fieldName,_startBit, _numOfBits)                      \
    GET_FIELD_INFO_BY_ID_MAC(                                                                           \
        PRV_TABLE_FORMAT_INFO(_dev)[PRV_CPSS_DXCH_TABLE_FORMAT_L2_MLL_BIER_E].fieldsInfoPtr,            \
        _fieldName,                                                                                     \
        _startBit,                                                                                      \
        _numOfBits)

/* macro to set value to field of L2 MLL BIER entry format in buffer nad raise bits appropriate to field
 * in the mask buffer */
#define SIP7_L2_MLL_BIER_FIELD_AND_MASK_SET_MAC(_dev, _hwDataArr, _hwMaskArr, _fieldName, _value)       \
    U32_SET_FIELD_AND_MASK_BY_ID_MAC(                                                                   \
        _hwDataArr, _hwMaskArr,                                                                         \
        PRV_TABLE_FORMAT_INFO(_dev)[PRV_CPSS_DXCH_TABLE_FORMAT_L2_MLL_BIER_E].fieldsInfoPtr,            \
        _fieldName,                                                                                     \
        _value)
/**
* @internal initTablesDbSip6 function
* @endinternal
*
* @brief   init the Sip6 tables info
*
* @param[in] devNum                   - device number
*                                       NONE
*/
GT_STATUS initTablesDbSip7
(
    IN GT_U8                devNum
);

#ifdef __cplusplus
}
#endif /* __cplusplus */

#endif /* __prvCpssDxChHwTablesSip7h */

